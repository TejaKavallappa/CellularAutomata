{"version":3,"sources":["webpack/bootstrap bd4a689d14b716f2441d","./js/main.js","./js/game.js","./js/board.js","./js/gameView.js","./js/menuBar.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACfD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB,mBAAmB;AACnC;AACA,mBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,mBAAmB;AACnC,mBAAkB,mBAAmB;AACrC;;AAEA,qBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,sBAAsB;AACtC;AACA,mBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bd4a689d14b716f2441d\n **/","var Game = require(\"./game\");\nvar GameView = require(\"./gameView\");\nvar MenuBar = require(\"./menuBar\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  var canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = GameView.DIM_X;\n  canvasEl.height = GameView.DIM_Y;\n\n  var cellSize = 20;\n  var ctx = canvasEl.getContext(\"2d\");\n  var game = new Game(ctx, cellSize);\n  var gv = new GameView(game, ctx, canvasEl, cellSize);\n  var menu = new MenuBar(game, gv);\n  gv.start();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require('./board.js');\n\nvar Game = function(ctx, cellSize){\n  this.board = new Board(26, ctx, cellSize);\n  this.colony = [];\n  this.ctx = ctx;\n};\nGame.DIM_X = 520;\nGame.DIM_Y = 520;\n\nGame.prototype.drawColony = function(ctx, cellCoord, cellSize){\n  // Temporary function to fill a particular cell with color\n  ctx.fillStyle = \"green\";\n  ctx.fillRect(cellCoord[0]+1, cellCoord[1]+1, cellSize-2, cellSize-2);\n  this.board.buildColony(cellCoord[0]/ cellSize, cellCoord[1]/ cellSize);\n};\n\nGame.prototype.isOver = function(){\n  return this.board.isOver();//When no colonies remain alive\n};\n\nGame.prototype.reset = function(){\n  this.board.status = \"paused\";\n  this.board.reset();\n};\nGame.prototype.run = function(){};\nGame.prototype.pause = function(){};\n\nGame.prototype.step = function(){\n  if (this.board.status === 'running'){\n    this.board.step();\n  }\n};\n\nmodule.exports = Game;\nwindow.Game = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 1\n ** module chunks = 0\n **/","var Board = function(numCells, ctx, cellSize){\n  this.colony = [];\n  this.numCells = numCells;\n  this.ctx = ctx;\n  this.cellSize = cellSize;\n  this.status = 'running';\n  this.grid = this.populate();\n};\n\nBoard.DIM_X = 520;\nBoard.DIM_Y = 520;\n\nBoard.prototype.populate = function(){\n  var grid = [];\n  for(var i = 0; i < this.numCells; i++){\n    grid.push([]);\n    for(var j = 0; j < this.numCells; j++){\n    grid[i].push(null);\n    }\n  }\n  return grid;\n};\n\nBoard.prototype.buildColony = function(x, y){\n  this.colony.push([x,y]);\n  this.grid[x][y] = 1;\n};\n\nBoard.NEIGHBORS = [[0,-1],[0,1],[1,0],[-1,0],[-1,-1],[-1,1],[1,-1],[1,1]];\n\nBoard.prototype.isOver = function(){\n  console.log(\"Game over\");\n};\n\nBoard.prototype.reset = function(){\n  this.status = 'paused';\n  this.grid = [];\n};\n\nBoard.prototype.step = function(){\n  var numAliveCells = 0;\n  var newGrid = this.populate();\n  for(var i = 0; i < this.numCells; i++){\n    for(var j = 0; j < this.numCells; j++){\n      var aliveNeighbors = 0;\n\n      for(var k = 0; k < Board.NEIGHBORS.length; k++){\n        var delta = Board.NEIGHBORS[k];\n        var gridVal = this.grid[i+delta[0]] ? this.grid[i+delta[0]][j+delta[1]] || 0 : 0;\n        aliveNeighbors += gridVal;\n      }\n        //If cell is alive, it dies if aliveNeighbors > 4 || aliveNeighbors < 1\n        // else it lives;\n        if (this.grid[i][j] === 1){\n          if (aliveNeighbors > 4 || aliveNeighbors < 1){\n            newGrid[i][j] = null;\n          }\n          else{\n            newGrid[i][j] = this.grid[i][j];\n            numAliveCells += 1;\n          }\n        }\n        // If cell is dead and it has aliveNeighbors == 3, it becomes alive\n        else if (!this.grid[i][j] && aliveNeighbors === 3){\n          newGrid[i][j] = 1;\n          numAliveCells += 1;\n        }\n        else{\n          newGrid[i][j] = this.grid[i][j];\n          numAliveCells += this.grid[i][j];\n         }\n    }//for j\n  }//for i\n  this.grid = newGrid;\n  if(!numAliveCells){\n    return this.game.isOver();\n  }\n  this.draw();\n};//step\n\nBoard.prototype.draw = function(){\n  var sz = this.cellSize;\n  // Clear up the board\n  this.ctx.clearRect(0, 0, Board.DIM_X, Board.DIM_Y);\n  this.ctx.fillStyle = 'grey';\n  this.ctx.fillRect(0, 0, Board.DIM_X, Board.DIM_Y);\n  // Redraw the board\n  var self = this;\n  this.ctx.fillStyle = \"yellow\";\n  for(var i = 0; i < this.grid.length; i++){\n    var row = this.grid[i];\n    for(var j = 0; j < row.length; j++){\n      if(this.grid[i][j] === 1){\n        this.ctx.fillRect(i*sz, j*sz, sz-2, sz-2);\n      }\n    }\n  }\nthis.drawGridLines();\n};\n\nBoard.prototype.drawGridLines = function() {\n  // Draw the grid\n  //padding around grid\n  var bw = Board.DIM_X;\n  var bh = Board.DIM_Y;\n  //size of canvas\n  var cw = bw + 1;\n  var ch = bh + 1;\n  // Vertical lines\n  this.ctx.strokeStyle = \"black\";\n  this.ctx.lineWidth = 1.3;\n  for (var x = 0; x <= bw; x += this.cellSize) {\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, bh);\n      this.ctx.stroke();\n  }\n // Horizontal lines\n  for (x = 0; x <= bh; x += this.cellSize) {\n      this.ctx.moveTo(0, x);\n      this.ctx.lineTo(bw, x);\n      this.ctx.stroke();\n  }\n  return;\n};\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/board.js\n ** module id = 2\n ** module chunks = 0\n **/","var GameView = function (game, ctx, canvasEl, cellSize) {\n  this.canvas = canvasEl;\n  this.ctx = ctx;\n  this.game = game;\n  this.cellSize = cellSize;\n  this.horCells = GameView.DIM_X/ this.cellSize;\n  this.verCells = GameView.DIM_Y/ this.cellSize;\n  this.bindListener();\n};\n\nGameView.DIM_X = 520;\nGameView.DIM_Y = 520;\n\nGameView.prototype.bindListener = function(){\n  this.canvas.addEventListener('click', this.handleClick.bind(this));\n};\n\nGameView.prototype.handleClick = function(e){\n  // Get the canvas coordinates\n  var canvasDim = this.canvas.getBoundingClientRect();\n  //Distance from left of canvas\n  var xCellNum = Math.floor((e.pageX - canvasDim.left)/ this.cellSize);\n  //Distance from top of canvas\n  var yCellNum = Math.floor((e.pageY - canvasDim.top)/ this.cellSize);\n  var cellCoord = [xCellNum* this.cellSize, yCellNum * this.cellSize];\n\n  this.game.drawColony(this.ctx, cellCoord ,this.cellSize);\n};\n\nGameView.prototype.draw = function(){\n  this.ctx.clearRect(0, 0, GameView.DIM_X, GameView.DIM_Y);\n  this.ctx.fillStyle = 'grey';\n  this.ctx.fillRect(0, 0, GameView.DIM_X, GameView.DIM_Y);\n};\n\nGameView.prototype.drawGridLines = function() {\n  // Draw the grid\n  //padding around grid\n  var bw = GameView.DIM_X;\n  var bh = GameView.DIM_Y;\n  //size of canvas\n  var cw = bw + 1;\n  var ch = bh + 1;\n  // Vertical lines\n  this.ctx.strokeStyle = \"black\";\n  this.ctx.lineWidth = 1.3;\n  for (var x = 0; x <= bw; x += this.cellSize) {\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, bh);\n      this.ctx.stroke();\n  }\n // Horizontal lines\n  for (x = 0; x <= bh; x += this.cellSize) {\n      this.ctx.moveTo(0, x);\n      this.ctx.lineTo(bw, x);\n      this.ctx.stroke();\n  }\n  return;\n};\n\nGameView.prototype.start = function () {\n  this.draw();\n  this.drawGridLines();\n};\n\nmodule.exports = GameView;\nwindow.GameView = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/gameView.js\n ** module id = 3\n ** module chunks = 0\n **/","\nvar MenuBar = function(game, gv){\n  this.game = game;\n  this.gameView = gv;\n  this.status = 'paused';\n  var start = document.getElementById('start-button');\n  var reset = document.getElementById('reset-button');\n  start.addEventListener('click', this.start.bind(this));\n  reset.addEventListener('click', this.reset.bind(this));\n};\n\nMenuBar.prototype.start = function(){\n  if (this.status === 'paused'){\n    this.status = 'running';\n    this.gameRun = setInterval(this.game.step.bind(this.game), 500);\n  }\n  else if(this.status === 'running'){\n    this.status = 'paused';\n    clearInterval(this.gameRun);\n  }\n};\n\nMenuBar.prototype.reset = function(){\n  this.status = 'paused';\n  this.game.reset();\n  this.gameView.start();\n};\n\n\nmodule.exports = MenuBar;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/menuBar.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}