{"version":3,"sources":["webpack/bootstrap da08872e7ad0dafee7b3","./js/main.js","./js/game.js","./js/menuBar.js","./js/board.js","./js/cell.js","./js/colony.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACpBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA,cAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,sBAAsB;AACtC;AACA,mBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,sBAAsB;AACtC,mBAAkB,sBAAsB;AACxC;;AAEA,qBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA,iBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACjGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,iBAAiB;AACjC;AACA,mBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap da08872e7ad0dafee7b3\n **/","var Game = require(\"./game\");\nvar MenuBar = require(\"./menuBar\");\nvar Board = require(\"./board\");\nvar Colony = require(\"./colony\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  var canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  window.WIDTH = 980;\n  window.HEIGHT = 520;\n  canvasEl.width = window.WIDTH;\n  canvasEl.height = window.HEIGHT;\n  var cellSize = 20;\n  var ctx = canvasEl.getContext(\"2d\");\n\n  var board = new Board([canvasEl.width/ cellSize, canvasEl.height/ cellSize],\n     ctx, cellSize);\n  var game = new Game(ctx, cellSize, board);\n  var menu = new MenuBar(game, canvasEl, cellSize, ctx);\n  var colony = new Colony(canvasEl, cellSize, game);\n  game.start();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Game = function(ctx, cellSize, board){\n  this.board = board;\n  this.colony = [];\n  this.ctx = ctx;\n  this.cellSize = cellSize;\n  Game.DIM_X = window.WIDTH;\n  Game.DIM_Y = window.HEIGHT;\n};\n\nGame.prototype.start = function () {\n  this.draw();\n  this.drawGridLines();\n};\n\nGame.prototype.draw = function(){\n  this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n  this.ctx.fillStyle = 'grey';\n  this.ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n};\n\nGame.prototype.drawGridLines = function() {\n  // Draw the grid\n  var bw = Game.DIM_X;\n  var bh = Game.DIM_Y;\n\n  // Vertical lines\n  this.ctx.strokeStyle = \"darkgrey\";\n  this.ctx.lineWidth = 1;\n  for (var x = 0; x <= Game.DIM_X; x += this.cellSize) {\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, bh);\n      this.ctx.stroke();\n  }\n // Horizontal lines\n  for (x = 0; x <= Game.DIM_Y; x += this.cellSize) {\n      this.ctx.moveTo(0, x);\n      this.ctx.lineTo(bw, x);\n      this.ctx.stroke();\n  }\n  return;\n};\n\nGame.prototype.drawColony = function(cellCoord){\n  var ctx = this.ctx;\n  var cellSize = this.cellSize;\n  // Temporary function to fill a particular cell with color\n  ctx.fillStyle = \"#2D5C8A\";\n  ctx.fillRect(cellCoord[0]+1, cellCoord[1]+1, cellSize-2, cellSize-2);\n  // Swap out the hor and vertical coordinates here becuase hor => columns\n  this.board.buildColony(cellCoord[1]/ cellSize, cellCoord[0]/ cellSize,\n    cellCoord);\n};\n\nGame.prototype.step = function(){\n    this.board.step();\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 1\n ** module chunks = 0\n **/","\nvar MenuBar = function(game, canvasEl, cellSize, ctx){\n  this.game = game;\n  this.canvas = canvasEl;\n  this.cellSize = cellSize;\n  this.ctx = ctx;\n  this.runningState = \"paused\";\n  this.getButtonRefs();\n  this.addButtonListeners();\n};\nMenuBar.prototype.getButtonRefs = function(){\n  this.startGOL = document.getElementById('start-button');\n  this.resetGOL = document.getElementById('reset-button');\n  this.stepGOL = document.getElementById('step-button');\n};\n\nMenuBar.prototype.addButtonListeners = function(){\n  this.canvas.addEventListener('click', this.handleClick.bind(this));\n  this.startGOL.addEventListener('click', this.startGame.bind(this));\n  this.resetGOL.addEventListener('click', this.resetGame.bind(this));\n  this.stepGOL.addEventListener('click', this.stepGame.bind(this));\n};\n\nMenuBar.prototype.startGame = function(){\n  // Toggle the button value\n    if (this.startGOL.getAttribute(\"start\") == this.startGOL.innerHTML) {\n      this.startGOL.innerHTML = this.startGOL.getAttribute(\"stop\");\n    } else {\n      this.startGOL.setAttribute(\"stop\", this.startGOL.innerHTML);\n      this.startGOL.innerHTML = this.startGOL.getAttribute(\"start\");\n    }\n    if (this.runningState === \"paused\"){\n      this.gameRun = setInterval(this.game.step.bind(this.game), 300);\n      this.runningState = \"running\";\n    }\n    else{\n        clearInterval(this.gameRun);\n        this.runningState = \"paused\";\n    }\n};\n\nMenuBar.prototype.resetGame = function(){\n  if (this.gameRun){\n    clearInterval(this.gameRun);\n  }\n  document.location.reload(true);\n};\n\nMenuBar.prototype.stepGame = function(){\n  this.game.step();\n};\nMenuBar.prototype.handleClick = function(e){\n  // Get the canvas coordinates\n  var canvasDim = this.canvas.getBoundingClientRect();\n  //Distance from left of canvas\n  var horCellNum = Math.floor((e.clientX - canvasDim.left)/ this.cellSize);\n  //Distance from top of canvas\n  var verCellNum = Math.floor((e.clientY - canvasDim.top)/ this.cellSize);\n\n  var cellCoord = [horCellNum* this.cellSize, verCellNum * this.cellSize];\n  this.game.drawColony(cellCoord);\n};\nmodule.exports = MenuBar;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/menuBar.js\n ** module id = 2\n ** module chunks = 0\n **/","var Cell = require(\"./cell\");\nvar Board = function(numCells, ctx, cellSize){\n  this.numCells = numCells;\n  this.ctx = ctx;\n  this.cellSize = cellSize;\n  this.generation = 0;\n  this.grid = this.populate();\n};\n\nBoard.prototype.populate = function(){\n  var grid = [];\n  for(var i = 0; i < this.numCells[1]; i++){\n    grid.push([]);\n    for(var j = 0; j < this.numCells[0]; j++){\n    grid[i].push(null);\n    }\n  }\n  return grid;\n};\n\nBoard.prototype.buildColony = function(x, y, cellCoord){\n  if(x < this.numCells[1] && y < this.numCells[0]){\n    if(this.grid[x][y]){\n      this.grid[x][y] = null;\n      this.undoSelect(cellCoord);\n    }\n    else{\n    this.grid[x][y] = 1;\n  }\n  }\n};\n\nBoard.prototype.undoSelect = function(cellCoord){\n  var ctx = this.ctx;\n  var cellSize = this.cellSize;\n  ctx.fillStyle = \"grey\";\n  ctx.fillRect(cellCoord[0]+1, cellCoord[1]+1, cellSize-2, cellSize-2);\n};\n\nBoard.NEIGHBORS = [\n  [0,-1],[0,1],\n  [1,0],[-1,0],\n  [-1,-1],[-1,1],\n  [1,-1],[1,1]];\n\nBoard.prototype.step = function(){\n  this.newGrid = this.populate();\n  this.newCells = [];\n  for(var i = 0; i < this.numCells[1]; i++){\n    for(var j = 0; j < this.numCells[0]; j++){\n      var aliveNeighbors = 0;\n\n      for(var k = 0; k < Board.NEIGHBORS.length; k++){\n        var delta = Board.NEIGHBORS[k];\n        var gridVal =\n          this.grid[i+delta[0]] ? this.grid[i+delta[0]][j+delta[1]] || 0 : 0;\n        aliveNeighbors += gridVal;\n      }\n        //If cell is alive, it dies if aliveNeighbors > 4 || aliveNeighbors < 1\n        // else it lives;\n\n        if (this.grid[i][j] === 1){\n          this.alive = true;\n          if (aliveNeighbors >= 4 || aliveNeighbors <= 1){\n            this.newGrid[i][j] = null;\n            this.newCells.push(new Cell([i,j],'dead'));\n          }\n          else{\n            this.newGrid[i][j] = this.grid[i][j];\n          }\n        }\n        // If cell is dead and it has aliveNeighbors == 3, it becomes alive\n        else if (!this.grid[i][j] && aliveNeighbors === 3){\n          this.newGrid[i][j] = 1;\n          this.newCells.push(new Cell([i,j],'alive'));\n        }\n        else{\n          this.newGrid[i][j] = this.grid[i][j];\n         }\n    }//for j\n  }//for i\n  this.grid = this.newGrid;\n  this.generation += 1;\n  // console.log(this.generation);\n  this.updateGrid(this.newCells);\n};//step\n\nBoard.prototype.updateGrid = function(){\n  // Iterate through new cells and only update the colours of those cells\n  var sz = this.cellSize;\n  for(var i = 0; i < this.newCells.length; i++){\n    var cell = this.newCells[i];\n    this.ctx.fillStyle = (cell.state === 'alive') ? '#2D5C8A' : '#bdbdbd';\n    this.ctx.fillRect(cell.y*sz+1, cell.x*sz+1, sz-2, sz-2);\n  }\n};\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/board.js\n ** module id = 3\n ** module chunks = 0\n **/","var Cell = function(location, state){\n  this.x = location[0];\n  this.y = location[1];\n  this.state = state;\n};\n\nmodule.exports = Cell;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/cell.js\n ** module id = 4\n ** module chunks = 0\n **/","var Colony = function(canvasEl, cellSize, game){\n  this.blinker = [[0, 1, 0], [0, 1, 0], [0, 1, 0]];\n  this.toad_blinker = [[0, 1, 1, 1],[1, 1, 1, 0]];\n  this.glider_spaceship = [[0, 0, 1],[1, 0, 1],[0, 1, 1]];\n  this.pentadecathlon = [\n    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n    [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],\n    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]];\n\n  this.getButtonRefs();\n  this.addButtonListeners();\n  this.canvas = canvasEl;\n  this.cellSize = cellSize;\n  this.game = game;\n};\n\nColony.prototype.getButtonRefs = function(){\n  this.osc = document.getElementById(\"osc\");\n  this.toad = document.getElementById(\"toad\");\n  this.glider = document.getElementById(\"glider\");\n  this.penta = document.getElementById(\"penta\");\n  this.trg = document.getElementById(\"can-div\");\n};\n\nColony.prototype.addButtonListeners = function(){\n  this.osc.addEventListener('dragstart',\n    this.dragstart_handler.bind(this));\n  this.toad.addEventListener('dragstart',\n    this.dragstart_handler.bind(this));\n  this.glider.addEventListener('dragstart',\n    this.dragstart_handler.bind(this));\n  this.penta.addEventListener('dragstart',\n    this.dragstart_handler.bind(this));\n\n  this.trg.addEventListener('dragover', this.dragover_handler.bind(this));\n  this.trg.addEventListener('dragenter', this.dragover_handler.bind(this));\n  this.trg.addEventListener('drop', this.ondrop_handler.bind(this));\n\n  this.toad.addEventListener('dragover', this.dragover_handler.bind(this));\n  this.toad.addEventListener('dragenter', this.dragover_handler.bind(this));\n  this.toad.addEventListener('drop', this.ondrop_handler.bind(this));\n\n  this.glider.addEventListener('dragover', this.dragover_handler.bind(this));\n  this.glider.addEventListener('dragenter', this.dragover_handler.bind(this));\n  this.glider.addEventListener('drop', this.ondrop_handler.bind(this));\n\n  this.penta.addEventListener('dragover', this.dragover_handler.bind(this));\n  this.penta.addEventListener('dragenter', this.dragover_handler.bind(this));\n  this.penta.addEventListener('drop', this.ondrop_handler.bind(this));\n};\n\nColony.prototype.dragstart_handler = function(ev) {\n ev.dataTransfer.setData(\"val\", ev.target.id);\n};\n\n\nColony.prototype.ondrop_handler = function(ev) {\n  var canvasDim = this.canvas.getBoundingClientRect();\n\n  var horCellNum = Math.floor((ev.pageX - canvasDim.left)/ this.cellSize);\n  var verCellNum = Math.floor((ev.pageY - canvasDim.top)/ this.cellSize);\n\n  var cellCoord = [horCellNum* this.cellSize, verCellNum * this.cellSize];\n\n ev.preventDefault();\n var data = ev.dataTransfer.getData(\"val\");\n this.drawPattern(data, cellCoord, canvasDim);\n};\n\nColony.prototype.drawPattern = function(patternId, cellCoord, canvasDim){\n  var data;\n  switch(patternId){\n    case \"osc\":\n      data = this.blinker;\n      break;\n    case \"toad\":\n      data = this.toad_blinker;\n      break;\n    case \"glider\":\n      data = this.glider_spaceship;\n      break;\n    case \"penta\":\n      data = this.pentadecathlon;\n      break;\n  }\n  var x = cellCoord[0];\n  var y = cellCoord[1];\n  for(var i = 0; i < data.length; i++){\n    x = cellCoord[0];\n    for(var j = 0; j < data[i].length; j++){\n      if (data[i][j] && x >= 0 && x <= canvasDim.right &&\n        y >= 0 && y <= canvasDim.bottom){\n        this.game.drawColony([x,y]);\n      }\n      x += this.cellSize;\n    }\n    y += this.cellSize;\n  }\n};\n\nColony.prototype.dragover_handler = function(ev){\n  ev.preventDefault();\n};\n\nmodule.exports = Colony;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/colony.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}